import sys
import pygame
import pprint

COLOR = [(0, 0, 0), 'green']


class Board:
    def __init__(self, rows, columns, size_rect):
        self.size_rect = size_rect
        self.rows = min(rows, (size[1] - self.size_rect - self.size_rect) // self.size_rect)
        self.columns = min(columns, (size[0] - self.size_rect - self.size_rect) // self.size_rect)
        self.mas = [[0 for i in range(self.columns)] for j in range(self.rows)]
        self.padding = size_rect
        self.next = [[0 for i in range(self.columns)] for j in range(self.rows)]

    def get(self):
        return self.columns, self.rows

    def update(self, coords):
        col, row = coords
        self.mas[row][col] = (self.mas[row][col] + 1) % 2
        color = COLOR[self.mas[row][col]]
        pygame.draw.rect(screen, color,
                         (self.padding + row * size_rect, self.padding + col * size_rect, size_rect, size_rect))
        pygame.draw.rect(screen, ('WHITE'),
                         (self.padding + row * size_rect, self.padding + col * size_rect, size_rect, size_rect), 1)
        pprint.pprint(self.mas)

    def count(self, col, row):
        c = 0
        for i in range(-1, 2):
            for j in range(-1, 2):
                if i == 0 and j == 0:
                    continue
                if self.mas[(row + i) % self.rows][(col + j) % self.columns] == 1:
                    c += 1
        return c

    def next_move(self):
        for col in range(self.columns):
            for row in range(self.rows):
                neighbors = self.count(col, row)
                if self.mas[row][col] == 1:
                    if neighbors < 2 or neighbors > 3:
                        self.next[row][col] = 0
                    else:
                        self.next[row][col] = 1
                else:
                    if neighbors == 3:
                        self.next[row][col] = 1
                    else:
                        self.next[row][col] = 0
        self.mas = [row[:] for row in self.next]
        self.next = [[0 for i in range(self.columns)] for j in range(self.rows)]

    def render(self, surface):
        surface.fill((0, 0, 0))

        for col in range(self.columns):
            for row in range(self.rows):
                color = COLOR[self.mas[row][col]]
                pygame.draw.rect(surface, color,
                                 (self.size_rect + col * self.size_rect,
                                  self.size_rect + row * self.size_rect,
                                  self.size_rect,
                                  self.size_rect))
                pygame.draw.rect(surface, 'White',
                                 (self.size_rect + col * self.size_rect,
                                  self.size_rect + row * self.size_rect,
                                  self.size_rect,
                                  self.size_rect),
                                 1)


if __name__ == '__main__':
    pygame.init()
    pygame.display.set_caption('Инициализация игры')
    size = (800, 600)
    speed = 20
    size_rect = 25
    screen = pygame.display.set_mode(size)
    clock = pygame.time.Clock()
    start = 0
    board = Board(100, 100, size_rect)
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    start = 1 - start


            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    x1, y1 = event.pos
                    if (size_rect <= x1 <= (board.get()[0] * size_rect + size_rect)) and (
                            size_rect <= y1 <= (board.get()[1] * size_rect + size_rect)):
                        board.update(((x1 - size_rect) // size_rect, (y1 - size_rect) // size_rect))
                    else:
                        print(None)
                elif event.button == 3:
                    start = 1 - start
                elif event.button == 4:
                    speed = min(60, speed + 5)
                elif event.button == 5:
                    speed = max(1, speed - 5)

        if start:
            board.next_move()

        screen.fill((0, 0, 0))
        board.render(screen)
        pygame.display.flip()
        clock.tick(speed)
